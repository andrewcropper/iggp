;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Breakthrough
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Components
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (role white)
  (role black)


  (<= (base (cell ?x ?y ?w))
      (index ?x)
      (index ?y)
      (role ?w))

  (<= (base (control ?w))
      (role ?w))


  (<= (input white (move ?u ?v ?u ?y))
      (index ?u)
      (index ?v)
      (succ ?v ?y))

  (<= (input white (move ?u ?v ?x ?y))
      (index ?u)
      (index ?v)
      (succ ?u ?x)
      (succ ?v ?y))

  (<= (input white (move ?u ?v ?x ?y))
      (index ?u)
      (index ?v)
      (succ ?x ?u)
      (succ ?v ?y))

  (<= (input black (move ?u ?v ?u ?y))
      (role ?r)
      (index ?u)
      (index ?v)
      (succ ?y ?v))

  (<= (input black (move ?u ?v ?x ?y))
      (index ?u)
      (index ?v)
      (succ ?u ?x)
      (succ ?y ?v))

  (<= (input ?r (move ?u ?v ?x ?y))
      (role ?r)
      (index ?u)
      (index ?v)
      (succ ?x ?u)
      (succ ?y ?v))

  (<= (input ?r noop)
      (role ?r))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (init (cell 1 1 white))
  (init (cell 2 1 white))
  (init (cell 3 1 white))
  (init (cell 4 1 white))
  (init (cell 5 1 white))
  (init (cell 6 1 white))
  (init (cell 7 1 white))
  (init (cell 8 1 white))
  (init (cell 1 2 white))
  (init (cell 2 2 white))
  (init (cell 3 2 white))
  (init (cell 4 2 white))
  (init (cell 5 2 white))
  (init (cell 6 2 white))
  (init (cell 7 2 white))
  (init (cell 8 2 white))

  (init (cell 1 7 black))
  (init (cell 2 7 black))
  (init (cell 3 7 black))
  (init (cell 4 7 black))
  (init (cell 5 7 black))
  (init (cell 6 7 black))
  (init (cell 7 7 black))
  (init (cell 8 7 black))
  (init (cell 1 8 black))
  (init (cell 2 8 black))
  (init (cell 3 8 black))
  (init (cell 4 8 black))
  (init (cell 5 8 black))
  (init (cell 6 8 black))
  (init (cell 7 8 black))
  (init (cell 8 8 black))

  (init (control white))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; legal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (legal white (move ?x ?y1 ?x ?y2))
      (true (control white))
      (true (cell ?x ?y1 white))
      (succ ?y1 ?y2)
      (not (true (cell ?x ?y2 white)))
      (not (true (cell ?x ?y2 black))))

  (<= (legal white (move ?x1 ?y1 ?x2 ?y2))
      (true (control white))
      (true (cell ?x1 ?y1 white))
      (succ ?y1 ?y2)
      (succ ?x1 ?x2)
      (not (true (cell ?x2 ?y2 white))))

  (<= (legal white (move ?x1 ?y1 ?x2 ?y2))
      (true (control white))
      (true (cell ?x1 ?y1 white))
      (succ ?y1 ?y2)
      (succ ?x2 ?x1)
      (not (true (cell ?x2 ?y2 white))))

  (<= (legal black (move ?x ?y1 ?x ?y2))
      (true (control black))
      (true (cell ?x ?y1 black))
      (succ ?y2 ?y1)
      (not (true (cell ?x ?y2 white)))
      (not (true (cell ?x ?y2 black))))

  (<= (legal black (move ?x1 ?y1 ?x2 ?y2))
      (true (control black))
      (true (cell ?x1 ?y1 black))
      (succ ?y2 ?y1)
      (succ ?x1 ?x2)
      (not (true (cell ?x2 ?y2 black))))

  (<= (legal black (move ?x1 ?y1 ?x2 ?y2))
      (true (control black))
      (true (cell ?x1 ?y1 black))
      (succ ?y2 ?y1)
      (succ ?x2 ?x1)
      (not (true (cell ?x2 ?y2 black))))
    
  (<= (legal white noop)
      (true (control black)))

  (<= (legal black noop)
      (true (control white)))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; next
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
  (<= (next (cell ?x2 ?y2 ?player))
      (does ?player (move ?x1 ?y1 ?x2 ?y2)))

  (<= (next (cell ?x3 ?y3 ?state))
      (does ?player (move ?x1 ?y1 ?x2 ?y2))
      (true (cell ?x3 ?y3 ?state))
      (distinct ?x1 ?x3)
      (distinct ?x2 ?x3))
    
  (<= (next (cell ?x3 ?y3 ?state))
      (does ?player (move ?x1 ?y1 ?x2 ?y2))
      (true (cell ?x3 ?y3 ?state))
      (distinct ?x1 ?x3)
      (distinct ?y2 ?y3))
    
  (<= (next (cell ?x3 ?y3 ?state))
      (does ?player (move ?x1 ?y1 ?x2 ?y2))
      (true (cell ?x3 ?y3 ?state))
      (distinct ?y1 ?y3)
      (distinct ?x2 ?x3))
    
  (<= (next (cell ?x3 ?y3 ?state))
      (does ?player (move ?x1 ?y1 ?x2 ?y2))
      (true (cell ?x3 ?y3 ?state))
      (distinct ?y1 ?y3)
      (distinct ?y2 ?y3))
    
  (<= (next (control white))
      (true (control black)))

  (<= (next (control black))
      (true (control white)))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; goal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (goal white 100) aux_whitewin)
  (<= (goal white 0) (not aux_whitewin))
    
  (<= (goal black 100) aux_blackwin)
  (<= (goal black 0) (not aux_blackwin))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; terminal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= terminal aux_whitewin)
  (<= terminal aux_blackwin)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Views
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= aux_whitewin (true (cell ?x 8 white)))
  (<= aux_whitewin (not aux_blackcell))

  (<= aux_blackwin (true (cell ?x 1 black)))
  (<= aux_blackwin (not aux_whitecell))

  (<= aux_whitecell (true (cell ?x ?y white)))
  (<= aux_blackcell (true (cell ?x ?y black)))    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(index 1) (index 2) (index 3) (index 4) (index 5) (index 6) (index 7) (index 8)
(succ 1 2)  (succ 2 3)  (succ 3 4)  (succ 4 5)  (succ 5 6)  (succ 6 7)  (succ 7 8)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;