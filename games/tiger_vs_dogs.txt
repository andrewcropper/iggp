;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Tiger Vs. Dogs Game
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLE Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;d: dog player
;;t: tiger player
(role d)
(role t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INIT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;(cell RowNumber ColumnNumber Simbol)
(init (cell 1 1 d))
(init (cell 1 2 d))
(init (cell 1 3 d))
(init (cell 1 4 d))
(init (cell 1 5 d))
(init (cell 2 1 d))
(init (cell 2 2 b))
(init (cell 2 3 b))
(init (cell 2 4 b))
(init (cell 2 5 d))
(init (cell 3 1 d))
(init (cell 3 2 b))
(init (cell 3 3 t))
(init (cell 3 4 b))
(init (cell 3 5 d))
(init (cell 4 1 d))
(init (cell 4 2 b))
(init (cell 4 3 b))
(init (cell 4 4 b))
(init (cell 4 5 d))
(init (cell 5 1 d))
(init (cell 5 2 d))
(init (cell 5 3 d))
(init (cell 5 4 d))
(init (cell 5 5 d))
;;tiger goes first
(init (control t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; LEGAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;moves vertically or horizontally or diagonally
(<= (legal ?player (move ?x1 ?y1 ?x2 ?y2))
    (true (control ?player))
    (true (cell ?x1 ?y1 ?player))
    (cellEmpty ?x2 ?y2)

)

;;;players take turns to play
(<= (legal d noop)
    (true (control t)))
(<= (legal t noop)
    (true (control d)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NEXT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;after moving cell becomes blank
(<= (next (cell ?x1 ?y1 b))
    (role ?player)
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))

;;;after moving cell oppcupied
(<= (next (cell ?x2 ?y2 ?player))
    (role ?player)
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))

;;;others stay in their cells if not moving
(<= (next (cell ?x3 ?y3 ?state))
    (true (cell ?x3 ?y3 ?state))
    (role ?player)
    (does ?player (move ?x1 ?y1 ?x2 ?y2))
    (distinctCell ?x1 ?y1 ?x3 ?y3)
    (distinctCell ?x2 ?y2 ?x3 ?y3))

(<= (next (control d))
    (true (control t)))
(<= (next (control t))
    (true (control d)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; TERMINAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GOAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal d 100)
    dogsWin)
(<= (goal d 0)
    (not dogsWin))

goal(d,100):-true_cell(3,3,d).

(<= dogsWin
    (index ?x)
    (true (cell 3 3 d)))

(<= (goal t 100)
    tigerWin)
(<= (goal t 0)
    (not tigerWin))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; View Definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (cell ?x ?y)
    (index ?x)
    (index ?y))

(<= (cellEmpty ?x ?y)
    (cell ?x ?y)
    (not (true (cell ?x ?y t)))
    (not (true (cell ?x ?y d))))

(<= (distinctCell ?x1 ?y1 ?x2 ?y2)
    (cell ?x1 ?y1)
    (cell ?x2 ?y2)
    (distinct ?x1 ?x2))
(<= (distinctCell ?x1 ?y1 ?x2 ?y2)
    (cell ?x1 ?y1)
    (cell ?x2 ?y2)
    (distinct ?y1 ?y2))

(<= (up x1 y1 x2 y2)
    (plusplus ?y1 ?y2)
    (not (distinct x1 x2))
)
(<= (down x1 y1 x2 y2)
    (plusplus ?y2 ?y1)
    (not (distinct x1 x2))
)
(<= (right x1 y1 x2 y2)
    (plusplus ?x1 ?x2)
    (not (distinct y1 y2))
)
(<= (left x1 y1 x2 y2)
    (plusplus ?x2 ?x1)
    (not (distinct y1 y2))
)

(<= (upright x1 y1 x2 y2)
    (plusplus ?x1 ?x2)
    (plusplus ?y1 ?y2)
)
(<= (downleft x1 y1 x2 y2)
    (plusplus ?x2 ?x1)
    (plusplus ?y2 ?y1)
)
(<= (upleft x1 y1 x2 y2)
    (plusplus ?x2 ?x1)
    (plusplus ?y1 ?y2)
)
(<= (downright x1 y1 x2 y2)
    (plusplus ?x1 ?x2)
    (plusplus ?y2 ?y1)
)

;;;WIP
(<= dogsWin
    (index ?x)
    (true (cell 3 3 d)))
(<= tigerWin
    (index ?x)
    (true (cell ?x 1 t)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Static Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(index 1) (index 2) (index 3) (index 4) (index 5)
(plusplus 1 2)  (plusplus 2 3)  (plusplus 3 4)  (plusplus 4 5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Bases and inputs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (cell ?x ?y ?player))
    (index ?x)
    (index ?y)
    (role ?player))
(<= (base (control ?player))
    (role ?player))

(<= (input ?player noop)
    (role ?player))

(<= (input ?player (move ?x1 ?y1 ?x2 ?y2))
    (index ?x1)
    (index ?y1)
    (index ?x2)
    (index ?y2)
    (role ?player)
    (or (up ?x1 ?y1 ?x2 ?y2)
        (upright ?x1 ?y1 ?x2 ?y2)
        (right ?x1 ?y1 ?x2 ?y2)
        (downright ?x1 ?y1 ?x2 ?y2)
        (down ?x1 ?y1 ?x2 ?y2)
        (downleft ?x1 ?y1 ?x2 ?y2)
        (left ?x1 ?y1 ?x2 ?y2)
        (upleft ?x1 ?y1 ?x2 ?y2)
    )
)
