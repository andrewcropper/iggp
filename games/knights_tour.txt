;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; knightstour
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Components
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (role robot)

  (<= (base (moveCount ?m)) (scoreMap ?m ?n))
  (<= (base (cell ?m ?n ?p)) (col ?m) (row ?n) (piece ?p))

  (<= (input robot (move ?x1 ?y1 ?x2 ?y2))
      (col ?x1)
      (row ?y1)
      (knightMove ?x1 ?y1 ?x2 ?y2))

  (row 1)
  (row 2)
  (row 3)
  (row 4)
  (row 5)

  (col 1)
  (col 2)
  (col 3)
  (col 4)
  (col 5)
  (col 6)

  (piece knight)
  (piece hole)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (init (moveCount 0))
  (init (cell 1 1 knight))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; legal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (legal robot (move ?x1 ?y1 ?x2 ?y2))
      (true (cell ?x1 ?y1 knight))
      (knightMove ?x1 ?y1 ?x2 ?y2))

legal_move(0,robot,X1,Y1,X2,Y2):-
  knightMove(X1,Y1,X2,Y2),
  true_cell(X1,Y1,knight).

legal_move(robot,X1,Y1,X2,Y2):-f1(X1,Y1,X2,Y2).
f1(X1,Y1,X2,Y2):-f2(X1,Y1),knightMove(X1,Y1,X2,Y2).
f2(X1,Y1):-true_cell(X1,Y1,knight).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; next
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (moveCount ?newCount))
  (true (moveCount ?oldCount))
  (add 1 count ?oldCount ?newCount))

next_moveCount(A):-next_moveCount(B),f1(B,A).
f1(A,B):-f2(count,A,B)
f2(A,B,C):-f3(1,A,B,C)
f3(A,B,C,D):-add(A,B,C,D).


(<= (next (cell ?x ?y hole))
  (true (cell ?x ?y hole)))
next_cell(A,B,hole):-my_true_cell(A,B,hole).

(<= (next (cell ?x1 ?y1 hole))
  (does robot (move ?x1 ?y1 ?x2 ?y2)))

next_cell(A,B,hole):-
  does_move(robot,A,B,_,_).

(<= (next (cell ?x2 ?y2 knight))
  (does robot (move ?x1 ?y1 ?x2 ?y2)))

next_cell(A,B,knight):-
  does_move(robot,_,_,A,B).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; goal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (goal robot ?goal)
      (true (moveCount ?count))
      (scoreMap ?count ?goal))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; terminal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= terminal
      (true (cell ?x ?y knight))
      (true (cell ?x ?y hole)))

terminal:-
  true_cell(A,B,knight),
  true_cell(A,B,hole).

terminal:-f1(A,B),f2(A,B).
f1(A,B):-true_cell(A,B,knight).
f2(A,B):-true_cell(A,B,hole).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Views
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 1 x ?x1 ?x2)
    (add 2 y ?y1 ?y2))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 1 x ?x1 ?x2)
    (add 2 y ?y2 ?y1))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 1 x ?x2 ?x1)
    (add 2 y ?y1 ?y2))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 1 x ?x2 ?x1)
    (add 2 y ?y2 ?y1))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 2 x ?x1 ?x2)
    (add 1 y ?y1 ?y2))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 2 x ?x1 ?x2)
    (add 1 y ?y2 ?y1))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 2 x ?x2 ?x1)
    (add 1 y ?y1 ?y2))

  (<= (knightMove ?x1 ?y1 ?x2 ?y2)
    (add 2 x ?x2 ?x1)
    (add 1 y ?y2 ?y1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add 1 count  0  1)
(add 1 count  1  2)
(add 1 count  2  3)
(add 1 count  3  4)
(add 1 count  4  5)
(add 1 count  5  6)
(add 1 count  6  7)
(add 1 count  7  8)
(add 1 count  8  9)
(add 1 count  9 10)
(add 1 count 10 11)
(add 1 count 11 12)
(add 1 count 12 13)
(add 1 count 13 14)
(add 1 count 14 15)
(add 1 count 15 16)
(add 1 count 16 17)
(add 1 count 17 18)
(add 1 count 18 19)
(add 1 count 19 20)
(add 1 count 20 21)
(add 1 count 21 22)
(add 1 count 22 23)
(add 1 count 23 24)
(add 1 count 24 25)
(add 1 count 25 26)
(add 1 count 26 27)
(add 1 count 27 28)
(add 1 count 28 29)
(add 1 count 29 30)
(add 1     x  1  2)
(add 1     x  2  3)
(add 1     x  3  4)
(add 1     x  4  5)
(add 1     x  5  6)
(add 1     y  1  2)
(add 1     y  2  3)
(add 1     y  3  4)
(add 1     y  4  5)
(add 2     x  1  3)
(add 2     x  2  4)
(add 2     x  3  5)
(add 2     x  4  6)
(add 2     y  1  3)
(add 2     y  2  4)
(add 2     y  3  5)

(scoreMap  0   0)
(scoreMap  1   3)
(scoreMap  2   6)
(scoreMap  3   9)
(scoreMap  4  12)
(scoreMap  5  15)
(scoreMap  6  18)
(scoreMap  7  21)
(scoreMap  8  24)
(scoreMap  9  27)
(scoreMap 10  30)
(scoreMap 11  33)
(scoreMap 12  36)
(scoreMap 13  39)
(scoreMap 14  42)
(scoreMap 15  45)
(scoreMap 16  48)
(scoreMap 17  51)
(scoreMap 18  54)
(scoreMap 19  57)
(scoreMap 20  60)
(scoreMap 21  63)
(scoreMap 22  66)
(scoreMap 23  69)
(scoreMap 24  72)
(scoreMap 25  75)
(scoreMap 26  80)
(scoreMap 27  85)
(scoreMap 28  90)
(scoreMap 29  96)
(scoreMap 30 100)